package app.backup;

import app.browser.ExtendedWebBrowser;
import app.main;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.nio.file.Files;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Collections;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.application.Platform;

public class AutoBackupDialog extends javax.swing.JDialog {

    private final String[] fileNames;

    private final File backupFile = new File(System.getProperty("user.home") + "\\AppData\\Roaming\\SuperToolkit\\Backup_Log.txt");
    private final File[] longTermBackupList = new File(System.getProperty("user.home") + "\\AppData\\Roaming\\SuperToolkit\\Backups_Old").listFiles();

    ExtendedWebBrowser webBrowser;

    public AutoBackupDialog(java.awt.Frame parent, boolean modal, ExtendedWebBrowser webBrowser) {
        super(parent, modal);

        this.webBrowser = webBrowser;

        SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yy HH:mm");

        Arrays.sort(longTermBackupList);
        Collections.reverse(Arrays.asList(longTermBackupList));

        if (backupFile.exists()) {

            fileNames = new String[longTermBackupList.length + 1];
            fileNames[0] = sdf.format(backupFile.lastModified()) + " (Latest)";

            for (int i = 0; i < longTermBackupList.length; i++) {
                String tempName = longTermBackupList[i].getName();
                fileNames[i + 1] = sdf.format(Long.parseLong(tempName.substring(11, tempName.length() - 4)));
            }

        } else {

            fileNames = new String[longTermBackupList.length];

            String tempName = longTermBackupList[0].getName();
            fileNames[0] = sdf.format(Long.parseLong(tempName.substring(11, tempName.length() - 4))) + " (Latest)";

            for (int i = 1; i < longTermBackupList.length; i++) {
                tempName = longTermBackupList[i].getName();
                fileNames[i] = sdf.format(Long.parseLong(tempName.substring(11, tempName.length() - 4)));
            }

        }

        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        fileSelectBox = new javax.swing.JComboBox(fileNames);
        loadButton = new javax.swing.JButton();
        enableButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Select Backup");
        setResizable(false);

        jLabel1.setText("Enable/Disable Backups or Load a Backup");

        loadButton.setText("Load");
        loadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadButtonActionPerformed(evt);
            }
        });

        enableButton.setText(webBrowser.isBackupEnabled() ? "Disable" : "Enable");
        enableButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enableButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(fileSelectBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(enableButton, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(loadButton, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {enableButton, loadButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(enableButton)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(loadButton)
                    .addComponent(fileSelectBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadButtonActionPerformed
        if (fileNames.length > 0) {

            if (backupFile.exists()) {

                if (fileSelectBox.getSelectedIndex() == 0) {
                    loadBackup(backupFile);
                } else {
                    loadBackup(longTermBackupList[fileSelectBox.getSelectedIndex() - 1]);
                }

            } else {
                loadBackup(longTermBackupList[fileSelectBox.getSelectedIndex()]);
            }
        }
        setVisible(false);
    }//GEN-LAST:event_loadButtonActionPerformed

    private void enableButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enableButtonActionPerformed

        if (webBrowser.isBackupEnabled()) {
            main.ModifyOptions(true, "B", null, webBrowser);
            webBrowser.disableBackup();
            System.out.println("Auto backup has been disabled for " + webBrowser.getName());
        } else {
            main.ModifyOptions(false, "B", "B", webBrowser);
            webBrowser.enableBackup();
            System.out.println("Auto backup has been enabled for " + webBrowser.getName());
        }
        setVisible(false);
    }//GEN-LAST:event_enableButtonActionPerformed

    private void loadBackup(File file) {

        Platform.runLater(() -> {

            try {

                String[] backupEntries = new String(Files.readAllBytes(file.toPath()), "UTF-8").split(AutoBackupThread.newLine + AutoBackupThread.customSplitString + AutoBackupThread.newLine, -1);

                for (int i = 0; i < backupEntries.length; i++) {
                    backupEntries[i] = backupEntries[i].replace(AutoBackupThread.newLine, "\\n");
                    backupEntries[i] = backupEntries[i].replace("\"", "\\\"");
                }

                webBrowser.getEngine().executeScript("document.getElementById(\"entry.50106969_month\").value = \"" + backupEntries[0] + "\"");
                webBrowser.getEngine().executeScript("document.getElementById(\"entry.50106969_day\").value = \"" + backupEntries[1] + "\"");
                webBrowser.getEngine().executeScript("document.getElementById(\"entry.50106969_year\").value = \"" + backupEntries[2] + "\"");
                webBrowser.getEngine().executeScript("document.getElementById(\"entry_1877084581\").value = \"" + backupEntries[3] + "\"");
                webBrowser.getEngine().executeScript("document.getElementById(\"entry_1290029990\").value = \"" + backupEntries[4] + "\"");
                webBrowser.getEngine().executeScript("document.getElementById(\"entry_1758939265\").value = \"" + backupEntries[5] + "\"");
                webBrowser.getEngine().executeScript("document.getElementById(\"entry_1705517941\").value = \"" + backupEntries[6] + "\"");
                webBrowser.getEngine().executeScript("document.getElementById(\"entry_1600669098\").value = \"" + backupEntries[7] + "\"");

                for (int i = 0; i < 2; i++) {
                    webBrowser.getEngine().executeScript("document.getElementsByName(\"entry.392665480\")[" + i + "].checked = " + backupEntries[8 + i]);
                }

                for (int i = 0; i < 2; i++) {
                    webBrowser.getEngine().executeScript("document.getElementsByName(\"entry.659717484\")[" + i + "].checked = " + backupEntries[10 + i]);
                }

                for (int i = 0; i < 2; i++) {
                    webBrowser.getEngine().executeScript("document.getElementsByName(\"entry.1657790510\")[" + i + "].checked = " + backupEntries[12 + i]);
                }

                webBrowser.getEngine().executeScript("document.getElementById(\"entry_398759739\").value = \"" + backupEntries[14] + "\"");

            } catch (IOException ex) {
                Logger.getLogger(AutoBackupDialog.class.getName()).log(Level.SEVERE, null, ex);
            }

        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton enableButton;
    private javax.swing.JComboBox fileSelectBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton loadButton;
    // End of variables declaration//GEN-END:variables
}

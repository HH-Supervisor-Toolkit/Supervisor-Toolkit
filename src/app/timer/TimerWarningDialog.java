package app.timer;

import app.browser.ExtendedWebBrowser;
import javafx.application.Platform;

//This class is the dialog that is displayed when an alert from the refresh timer should be given.
public class TimerWarningDialog extends javax.swing.JDialog {

    private final ExtendedWebBrowser webBrowser;
    
    public TimerWarningDialog(java.awt.Frame parent, boolean modal, int timerDuration, long timeDifference, ExtendedWebBrowser ewb) {
        super(parent, modal);       
        webBrowser = ewb;
        
        initComponents();
        updateMessage(timerDuration, timeDifference);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        messageLabel = new javax.swing.JLabel();
        okayButton = new javax.swing.JButton();
        reloadButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Timer Warning");
        setResizable(false);

        messageLabel.setText("[Message]");

        okayButton.setText("Okay");
        okayButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okayButtonActionPerformed(evt);
            }
        });

        reloadButton.setText("Reload");
        reloadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reloadButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(okayButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(reloadButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(messageLabel)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(messageLabel)
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(okayButton)
                    .addComponent(reloadButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //Called when the okay button is clicked. Simply hides the dialog and won't prevent further alerts.
    private void okayButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okayButtonActionPerformed
        setVisible(false);
    }//GEN-LAST:event_okayButtonActionPerformed

    //Called when the reload button is clicekd. Will reload the page and then hide the dialog.
    private void reloadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reloadButtonActionPerformed

        Platform.runLater(() -> {
            webBrowser.getEngine().reload();
        });

        setVisible(false);
    }//GEN-LAST:event_reloadButtonActionPerformed

    //This function allow for the alert message to be updated outside of the class.
    public final void updateMessage(int timerDuration, long timeDifference){
        messageLabel.setText("Your timer for " + webBrowser.getName() + " is at " + String.format("%.2f", (double) timeDifference / (60000)) + " of " + timerDuration + " minutes");
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel messageLabel;
    private javax.swing.JButton okayButton;
    private javax.swing.JButton reloadButton;
    // End of variables declaration//GEN-END:variables
}

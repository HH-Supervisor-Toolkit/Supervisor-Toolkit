package app.watcher;

import app.browser.ExtendedWebBrowser;
import java.util.Arrays;
import java.util.List;
import javafx.application.Platform;

//This class is the dialog that is displayed when the user selects the Watcher options in the right-click popup menu.
//This dialog allows the user to modify which users he/she wants to listen to.
public class WatcherSelectDialog extends javax.swing.JDialog {

    private static ExtendedWebBrowser webBrowser;
    
    public WatcherSelectDialog(java.awt.Frame parent, boolean modal, ExtendedWebBrowser webBrowser) {
        super(parent, modal);
        initComponents();
        
        WatcherSelectDialog.webBrowser = webBrowser;
        
        //This will populate the dialog with all the agents currently online.
        Platform.runLater(() -> {
            int TutorCount = ((Integer) webBrowser.getEngine().executeScript("frames[0].document.getElementById(\"tagents\").rows.length"));
            String[] tutorNameList = new String[TutorCount - 1];
            
            System.out.println("There are " + TutorCount + " tutors online right now. Loaded them into the watcher selection screen.");
            
            for (int i = 1; i < TutorCount; i++) {
                //Like always we have to filter out the fluff that is attached to the agent's name in real-time agent.
                String tempName = (String) webBrowser.getEngine().executeScript("frames[0].document.getElementById(\"tagents\").rows[" + i + "].children[0].innerHTML");
                tutorNameList[i - 1] = tempName.substring(tempName.lastIndexOf("&nbsp;") + 6, tempName.length());
            }
            
            Arrays.sort(tutorNameList);
            watchableList.setListData(tutorNameList);
            
            //If the watcher is already active we also get the list of tutors we are listening too. These are added to the list of removable tutors.
            if (webBrowser.isWatcherEnabled()) {
                
                String[] watchedList = webBrowser.getWatched();
                
                if (watchedList.length > 0) {
                    removeList.setListData(watchedList);
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        watchableList = new javax.swing.JList();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        removeList = new javax.swing.JList();
        selectButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Watcher Select");
        setResizable(false);

        jLabel1.setText("Who would you like to add a watcher for?");

        jScrollPane1.setViewportView(watchableList);

        jLabel2.setText("Users currently being watched:");

        jScrollPane2.setViewportView(removeList);

        selectButton.setText("Select");
        selectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        removeButton.setText("Remove");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 286, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(selectButton)
                            .addComponent(cancelButton)
                            .addComponent(removeButton))))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cancelButton, removeButton, selectButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(selectButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addComponent(removeButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //Called when the Select button is clicked. This gets all the agents selected to be added to the watched list and adds them.
    private void selectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectButtonActionPerformed
        List<String> watchAddList = watchableList.getSelectedValuesList();

        if (!webBrowser.isWatcherEnabled()) {
            webBrowser.enableWatcher();
        }

        watchAddList.stream().forEach((String watchAdd) -> {
            webBrowser.addWatched(watchAdd);
        });

        setVisible(false);
    }//GEN-LAST:event_selectButtonActionPerformed

    //Called when the Cancel button is clicked. Hides the dialog.
    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        setVisible(false);
    }//GEN-LAST:event_cancelButtonActionPerformed

    //Called when the Remove button is clicked. This gets all the agents selected to be removed from the watched list and removes them.
    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        if (webBrowser.isWatcherEnabled()) {
            List<String> watchRemoveList = removeList.getSelectedValuesList();

            watchRemoveList.stream().forEach((String watchRemove) -> {
                webBrowser.removeWatched(watchRemove);
            });

            setVisible(false);
        }
    }//GEN-LAST:event_removeButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton removeButton;
    private javax.swing.JList removeList;
    private javax.swing.JButton selectButton;
    private javax.swing.JList watchableList;
    // End of variables declaration//GEN-END:variables
}
